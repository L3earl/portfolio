crawing_kwd
source('000.global.R')
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
arima_para_dt <- fread("arima_para.csv", encoding = 'UTF-8') %>%
arrange(priority) %>%
setDT()
arima_para <- arima_para_dt[id == batch_id[1],]
batch_id <- arima_para_dt %>%
filter(priority != 'done') %>%
select(id)
batch_id <- batch_id[,]
batch_end <- length(batch_id)
batch_num <- 1
batch_id
arima_para <- arima_para_dt[id == batch_id[1],]
# train 데이터 기간의 시작 ~ 끝
s_dt <- arima_para[,train_st_dt]
e_dt <- arima_para[,train_end_dt]
sdt <- gsub('-', '', arima_para[,train_st_dt])
edt <- gsub('-', '', arima_para[,train_end_dt])
## apriori, 키워드 - 구매 매핑 데이터 생성
# 파라미터 세팅
ap_supp <- arima_para[,ap_sup]
ap_con <- arima_para[,ap_con]
ap_min <- arima_para[,ap_min]
ap_max <- arima_para[,ap_max]
# 파일명 생성
kwd_mapping_file_name <- paste0('kwd_map_', sdt, '_', edt, '_',
ap_supp, '_', ap_con, '_',
ap_min, '_', ap_max, '.csv')
cr_timeunit <- arima_para[,cr_timeunit]
# 파일명 생성
naver_file_name <- paste0('naver_dlab_', sdt, '_', edt, '_',
cr_timeunit, '.csv')
# 파라미터 세팅
tf_phase <- arima_para[,tf_phase]
# 파일명 생성
tf_idf_file_name <- paste0('tf_idf_', sdt, '_', edt, '_',
tf_phase, '.csv')
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
kwd_mapping_data
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
kwd_mapping_data
tf_idf_kwd
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
setDT()
search2 <- fread(paste0(data_path,'search2.csv'), encoding = 'UTF-8')
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
setDT()
tf_idf_kwd
kwd_mapping_data
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
filter(KWD_NM == kwd_mapping_data$KWD_NM) %>%
setDT()
tf_idf_kwd
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
inner_join(kwd_mapping_data, by = 'KWD_NM') %>%
setDT()
tf_idf_kwd
kwd_mapping_data
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
inner_join(kwd_mapping_data %>% select(KWD_NM) %>% distinct(), by = 'KWD_NM') %>%
setDT()
tf_idf_kwd
kwd_mapping_data %>% select(KWD_NM) %>% distinct()
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
#    inner_join(kwd_mapping_data %>% select(KWD_NM) %>% distinct(), by = 'KWD_NM') %>%
setDT()
tf_idf_kwd
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F) %>%
select(KWD_NM) %>%
distinct()
naver_dlab_data <- read.csv(paste0(naver_file_path, naver_file_name), fileEncoding = 'UTF-8') %>%
select(-startDate, -endDate, -timeunit) %>%
gather(key = SESS_DT, value = SEARCH_CNT_nv, -srch_kwd) %>%
mutate(SESS_DT = gsub("dt_", "", SESS_DT)) %>%
rename(KWD_NM = srch_kwd) %>%
setDT()
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
inner_join(kwd_mapping_data, by = 'KWD_NM') %>%
setDT()
tf_idf_kwd
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
select(SESS_DT, CLAC3_NM, PD_BUY_CT) %>%
setDT()
sell_dt
source('000.global.R')
product <- fread(paste0(data_path,'product.csv'), encoding = 'UTF-8')
search1 <- fread(paste0(data_path,'search1.csv'), encoding = 'UTF-8')
session <- fread(paste0(data_path,'session.csv'), encoding = 'UTF-8')
master <- fread(paste0(data_path,'master.csv'), encoding = 'UTF-8')
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
tf_idf_data <- fread(paste0(tf_idf_file_path, tf_idf_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
select(SESS_DT, CLAC3_NM, PD_BUY_CT) %>%
setDT()
final_data <- tf_idf_data %>%
inner_join(kwd_mapping_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
inner_join(sell_dt, by = c('SESS_DT', 'CLAC3_NM')) %>%
setDT()
search2 <- fread(paste0(data_path,'search2.csv'), encoding = 'UTF-8')
# 키워드 - 소분류 규칙
kwd_mapping_data_distinct <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F) %>%
select(KWD_NM) %>%
distinct()
# 네이버 크롤링 데이터 불러오기
naver_dlab_data <- read.csv(paste0(naver_file_path, naver_file_name), fileEncoding = 'UTF-8') %>%
select(-startDate, -endDate, -timeunit) %>%
gather(key = SESS_DT, value = SEARCH_CNT_nv, -srch_kwd) %>%
mutate(SESS_DT = gsub("dt_", "", SESS_DT)) %>%
rename(KWD_NM = srch_kwd) %>%
setDT()
# TF_IDF에 사용할 키워드를 전체 데이터에서 연관규칙분석 키워드로 필터링
tf_idf_kwd <- search2 %>%
group_by(SESS_DT,KWD_NM) %>%
summarise(SEARCH_CNT = sum(SEARCH_CNT)) %>%
inner_join(kwd_mapping_data_distinct, by = 'KWD_NM') %>%
setDT()
### TF_IDF 파라미터
# 기간 sdt ~ edt
# 파라미터 tf_phase
# TF_IDF 데이터 만들 날짜 생성
dt_tf_idf <- set_date %>%
filter(Date >= s_dt, Date <= e_dt) %>%
select(dt) %>%
setDT()
set_day <- sort(unique(dt_tf_idf$dt))
## search2 키워드로 TF_IDF 생성
tf_result <- c()
for(mon_w in 1:(length(set_day)-13)){
print(mon_w/(length(set_day)-13))
# 학습에 사용할 날짜
set_day_temp <- set_day[mon_w:(mon_w + tf_phase - 1)]
# 학습에 쓰일 데이터만 추출
data_temp <- lapply(set_day_temp, function(x) tf_idf_kwd[tf_idf_kwd$SESS_DT == x])
# 마지막 날짜의 데이터
data_now <- data_temp[[length(data_temp)]]
# 전체 날짜 데이터
data_temp <- do.call(rbind, data_temp)
# TF (현재 날짜의 검색량) 생성
data_now$TF<- log(data_now$SEARCH_CNT)
# 키워드별로 n_IDF (phase 동안 검색어가 출현한 빈도) 생성
data_set_IDF <- lapply(data_now$KWD_NM, function(x) data.table(KWD_NM = x,
n_idf = nrow(data_temp[KWD_NM == x])))
data_set <- do.call(rbind, data_set_IDF)
# 최종 데이터
data_now <- merge(data_now, data_set, by = 'KWD_NM')
data_now$IDF <- 1+log(length(set_day_temp)/data_now$n_idf)
data_now$TF_IDF <- data_now$TF * data_now$IDF
tf_result <- rbind(tf_result, data_now)
}
## 네이버 크롤링 키워드로 TF_IDF 생성
tf_result_naver <- c()
for(mon_w in 1:(length(set_day)-13)){
print(mon_w/(length(set_day)-13))
# 학습에 사용할 날짜
set_day_temp <- set_day[mon_w:(mon_w + tf_phase - 1)]
# 학습에 쓰일 데이터만 추출
data_temp <- lapply(set_day_temp, function(x) naver_dlab_data[naver_dlab_data$SESS_DT == x])
# 마지막 날짜의 데이터
data_now <- data_temp[[length(data_temp)]]
# 전체 날짜 데이터
data_temp <- do.call(rbind, data_temp)
# TF (현재 날짜의 검색량) 생성
data_now$TF_nv<- log(data_now$SEARCH_CNT_nv)
# 키워드별로 n_IDF (phase 동안 검색어가 출현한 빈도) 생성
data_set_IDF <- lapply(data_now$KWD_NM, function(x) data.table(KWD_NM = x,
n_idf_nv = nrow(data_temp[KWD_NM == x])))
data_set <- do.call(rbind, data_set_IDF)
# 최종 데이터
data_now <- merge(data_now, data_set, by = 'KWD_NM')
data_now$IDF_nv <- 1+log(length(set_day_temp)/data_now$n_idf_nv)
data_now$TF_IDF_nv <- data_now$TF_nv * data_now$IDF_nv
tf_result_naver <- rbind(tf_result_naver, data_now)
}
final <- tf_result_naver %>%
inner_join(tf_result, by = c('KWD_NM', 'SESS_DT')) %>%
setDT()
# 저장
write.csv(final, paste0(tf_idf_file_path, tf_idf_file_name),
row.names = FALSE, fileEncoding = 'UTF-8')
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
tf_idf_data <- fread(paste0(tf_idf_file_path, tf_idf_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
select(SESS_DT, CLAC3_NM, PD_BUY_CT) %>%
setDT()
sell_dt
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
setDT()
sell_dt
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(CLAC3_NM, WEEK) %>%
summarise(sum_ord = sum(PD_BUY_CT))) %>%
setDT()
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(CLAC3_NM, WEEK) %>%
summarise(sum_ord = sum(PD_BUY_CT)) %>%
setDT()
stR(product)
str(product)
sell_dt <- product %>%
inner_join(master, by = c('PD_C')) %>%
inner_join(session, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(search1, by = c('CLNT_ID', 'SESS_ID')) %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(CLAC3_NM, WEEK) %>%
summarise(sum_ord = sum(as.integer(PD_BUY_CT))) %>%
setDT()
sell_dt
sell_dt[is.na(sell_dt)]
is.na(sell_dt)
sell_dt[is.na(sell_dt)]
sell_dt[,is.na(sell_dt)]
sell_dt
tmp <- sell_dt %>%
filter(is.na(CLAC3_NM)) %>%
setDT()
tmp
tmp <- sell_dt %>%
filter(is.na(sum_ord)) %>%
setDT()
tmp
tmp <- sell_dt %>%
filter(is.na(WEEK)) %>%
setDT()
tmp
sell_dt[is.na(sell_dt)] <- 0
tmp <- sell_dt %>%
filter(is.na(sum_ord)) %>%
setDT()
tmp
kwd_mapping_data <- fread(paste0(kwd_mapping_file_path, kwd_mapping_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
tf_idf_data <- fread(paste0(tf_idf_file_path, tf_idf_file_name),
encoding = 'UTF-8', stringsAsFactors = F)
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
setDT()
final_data
kwd_mapping_data
tf_idf_data
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
#inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
setDT()
final_data
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
setDT()
final_data
kwd_mapping_data
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
#inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
setDT()
final_data
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(KWD_NM, CLAC3_NM, WEEK) %>%
summarise(sum_TF = sum(TF),
mean_TF = mean(TF),
sum_TF_IDF = sum(TF_IDF),
mean_TF_IDF = mean(TF_IDF),
sum_TF_nv = sum(TF_nv),
mean_TF_nv = mean(TF_nv),
sum_TF_IDF_nv = sum(TF_IDF_nv),
mean_TF_IDF_nv = mean(TF_IDF_Nv)) %>%
setDT()
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(KWD_NM, CLAC3_NM, WEEK) %>%
summarise(sum_TF = sum(TF),
mean_TF = mean(TF),
sum_TF_IDF = sum(TF_IDF),
mean_TF_IDF = mean(TF_IDF),
sum_TF_nv = sum(TF_nv),
mean_TF_nv = mean(TF_nv),
sum_TF_IDF_nv = sum(TF_IDF_nv),
mean_TF_IDF_nv = mean(TF_IDF_nv)) %>%
setDT()
final_data
final_data[is.na(final_data)]
final_data[,is.na(final_data)]
final_data[is.na(final_data)] <- 0
sell_dt
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(KWD_NM, CLAC3_NM, WEEK) %>%
summarise(sum_TF = sum(TF),
mean_TF = mean(TF),
sum_TF_IDF = sum(TF_IDF),
mean_TF_IDF = mean(TF_IDF),
sum_TF_nv = sum(TF_nv),
mean_TF_nv = mean(TF_nv),
sum_TF_IDF_nv = sum(TF_IDF_nv),
mean_TF_IDF_nv = mean(TF_IDF_nv)) %>%
inner_join(sell_dt, by =c('CLAC3_NM', 'WEEK')) %>%
setDT()
final_data[is.na(final_data)] <- 0
final_data
final_data <- kwd_mapping_data %>%
inner_join(tf_idf_data, by = 'KWD_NM') %>%
inner_join(set_date, by = c('SESS_DT' = 'dt')) %>%
group_by(KWD_NM, CLAC3_NM, WEEK) %>%
summarise(sum_TF = sum(TF),
mean_TF = mean(TF),
sum_TF_IDF = sum(TF_IDF),
mean_TF_IDF = mean(TF_IDF),
sum_TF_nv = sum(TF_nv),
mean_TF_nv = mean(TF_nv),
sum_TF_IDF_nv = sum(TF_IDF_nv),
mean_TF_IDF_nv = mean(TF_IDF_nv)) %>%
#inner_join(sell_dt, by =c('CLAC3_NM', 'WEEK')) %>%
setDT()
final_data[is.na(final_data)] <- 0
final_data
arima_para
arima_para_dt <- fread("arima_para.csv", encoding = 'UTF-8') %>%
arrange(priority) %>%
setDT()
arima_para_dt
arima_para_dt <- fread("arima_para.csv", encoding = 'UTF-8') %>%
arrange(priority) %>%
setDT()
arima_para_dt
